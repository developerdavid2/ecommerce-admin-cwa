// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model Store {
  id        String   @id @default(uuid())
  name      String
  userId    String
  billboards Billboard[] @relation("StoreToBillboard")
  categories  Category[]  @relation("StoreToCategory")
  sizes     Size[]     @relation("StoreToSize")
  colours   Colour[]   @relation("StoreToColour")
  products  Product[]  @relation("StoreToProduct")
  orders    Order[]    @relation("StoreToOrder")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Billboard {
  id        String   @id @default(uuid())
  storeId   String
  store     Store     @relation("StoreToBillboard",fields: [storeId], references: [id])
  label      String
  imageUrl   String
  categories Category[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}


model Category{
  id        String   @id @default(uuid())
  storeId   String
  store     Store     @relation("StoreToCategory",fields: [storeId], references: [id])
  billboardId      String
  billboard   Billboard @relation(fields: [billboardId], references: [id])
  products  Product[]  @relation("CategoryToProduct")
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
  @@index([billboardId])
}


model Size{
  id        String   @id @default(uuid())
  storeId   String
  store     Store     @relation("StoreToSize",fields: [storeId], references: [id])
  products  Product[]  @relation("SizeToProduct")
  name      String
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}

model Colour{
  id        String   @id @default(uuid())
  storeId   String
  store     Store     @relation("StoreToColour",fields: [storeId], references: [id])
  products  Product[]  @relation("ColourToProduct")
  name      String
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}



model Product {
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId String
  category Category @relation("CategoryToProduct",fields: [categoryId], references: [id])
  sizeId String
  size Size @relation("SizeToProduct",fields: [sizeId], references: [id])
  colourId String
  colour Colour @relation("ColourToProduct",fields: [colourId], references: [id])
  orderItems OrderItem[]
  images Image[]
  name String
  price Decimal
  isFeatured Boolean @default(false)
  isArchived Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([colourId])
}

model Image {
  id String @id @default(uuid())
  productId String
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  url String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}


model Order {
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems OrderItem[]
  userName String @default("")
  isPaid Boolean @default(false)
  phone String @default("")
  address String @default("")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([storeId])
}


model OrderItem {
  id String @id @default(uuid())
  orderId String
  order Order @relation(fields: [orderId], references: [id])
  productId String
  product Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}